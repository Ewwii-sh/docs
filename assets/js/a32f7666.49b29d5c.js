"use strict";(self.webpackChunkewwii_docs=self.webpackChunkewwii_docs||[]).push([[8216],{508:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>o});var i=a(9729);const t={},s=i.createContext(t);function l(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(s.Provider,{value:n},e.children)}},2372:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"config_and_syntax/variables","title":"Variables","description":"Now that you feel sufficiently greeted by your bar, you may realize that showing data like the time and date might be even more useful than having a button that greets you.","source":"@site/versioned_docs/version-0.1.4/config_and_syntax/variables.md","sourceDirName":"config_and_syntax","slug":"/config_and_syntax/variables","permalink":"/docs/0.1.4/config_and_syntax/variables","draft":false,"unlisted":false,"tags":[],"version":"0.1.4","sidebarPosition":2.5,"frontMatter":{"sidebar_position":2.5},"sidebar":"tutorialSidebar","previous":{"title":"The Rhai Expression Engine","permalink":"/docs/0.1.4/config_and_syntax/expression_language"},"next":{"title":"Widgets","permalink":"/docs/0.1.4/widgets/"}}');var t=a(5813),s=a(508);const l={sidebar_position:2.5},o="Variables",r={},d=[{value:"Static variables",id:"static-variables",level:2},{value:"Dynamic variables",id:"dynamic-variables",level:2},{value:"Passing variables",id:"passing-variables",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"variables",children:"Variables"})}),"\n",(0,t.jsx)(n.p,{children:"Now that you feel sufficiently greeted by your bar, you may realize that showing data like the time and date might be even more useful than having a button that greets you."}),"\n",(0,t.jsxs)(n.p,{children:["To implement dynamic content in your widgets, you make use of ",(0,t.jsx)(n.em,{children:"variables"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"All variables are only locally available so you would need to pass it around using function parameters. And whenever the variable changes, the value in the widget will update!"}),"\n",(0,t.jsx)(n.h2,{id:"static-variables",children:"Static variables"}),"\n",(0,t.jsx)(n.p,{children:"In Rhai, all variables are dynamically typed bindings to values. You can define variables using let, pass them as function parameters."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["Basic variables (",(0,t.jsx)(n.code,{children:"let"}),")"]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'let foo = "value";\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This is the simplest type of variable.\nBasic variables don't ever change automatically, if you need a dynamic variable, you can use built in functions like ",(0,t.jsx)(n.code,{children:"poll()"})," and ",(0,t.jsx)(n.code,{children:"listen()"})," to register dynamic values which we will talk about in the following section."]}),"\n",(0,t.jsx)(n.h2,{id:"dynamic-variables",children:"Dynamic variables"}),"\n",(0,t.jsx)(n.p,{children:"Just having static variables that wont update is pretty limiting. So, ewwii has two built in functions to register dynamic variables that can change according to the command."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["Polling variables (",(0,t.jsx)(n.code,{children:"poll"}),")"]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'enter([\n  poll("var_name", #{\n      // It is recommended to have initial property passed.\n      // If not provided, it will default to no value which may cause problems when used.\n      // You can pass something like "" if you want no initial value.\n      initial: "inital value",\n      interval: "2s",\n      cmd: "date +%H:%M:%S", // command to execute\n  });\n])\n'})}),"\n",(0,t.jsx)(n.p,{children:"A polling variable is a variable which runs a provided shell-script repeatedly, in a given interval."}),"\n",(0,t.jsxs)(n.p,{children:["This may be the most commonly used type of variable.\nThey are useful to access any quickly retrieved value repeatedly,\nand thus are the perfect choice for showing your time, date, as well as other bits of information such as pending package updates, weather, and battery level.\nBut it is important to note that these variables are locally available only in enter (a.k.a the root) and you need to pass it to other functions with something like ",(0,t.jsx)(n.code,{children:"some_fn(foo)"})," when you want to use a polled variable."]}),"\n",(0,t.jsxs)(n.p,{children:["To externally update a polling variable, ",(0,t.jsx)(n.code,{children:"ewwii\xa0update"})," can be used like with basic variables to assign a value. ",(0,t.jsx)(n.a,{href:"/docs/0.1.4/commands/update",children:"Learn more about ewwii update"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["Listening variables (",(0,t.jsx)(n.code,{children:"listen"}),")"]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'enter([\n  listen("foo", #{\n    initial: "whatever",\n    cmd: "tail -F /tmp/some_file",\n  });\n])\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Listening variables might be the most confusing of the bunch.\nA listening variable runs a script once, and reads its output continously.\nWhenever the script outputs a new line, the value will be updated to that new line.\nIn the example given above, the value of ",(0,t.jsx)(n.code,{children:"foo"})," will start out as ",(0,t.jsx)(n.code,{children:'"whatever"'}),", and will change whenever a new line is appended to ",(0,t.jsx)(n.code,{children:"/tmp/some_file"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"These are particularly useful when you want to apply changes instantaneously when an operation happens if you have a script\nthat can monitor some value on its own. Volume, brightness, workspaces that get added/removed at runtime,\nmonitoring currently focused desktop/tag, etc. are the most common usecases of this type of variable.\nThese are particularly efficient and should be preffered if possible."}),"\n",(0,t.jsxs)(n.p,{children:["For example, the command ",(0,t.jsx)(n.code,{children:"xprop\xa0-spy\xa0-root\xa0_NET_CURRENT_DESKTOP"})," writes the currently focused desktop whenever it changes.\nAnother example usecase is monitoring the currently playing song with playerctl: ",(0,t.jsx)(n.code,{children:"playerctl\xa0--follow metadata\xa0--format\xa0{{title}}"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["Dynamic variables created by ",(0,t.jsx)(n.code,{children:"poll"})," or ",(0,t.jsx)(n.code,{children:"listen"})," handlers\nshould always be defined inside an ",(0,t.jsx)(n.code,{children:"enter([])"})," block.\nIf ",(0,t.jsx)(n.code,{children:"poll"})," or ",(0,t.jsx)(n.code,{children:"listen"})," is defined outside the ",(0,t.jsx)(n.code,{children:"enter([])"})," block, then they simply will be ignored."]})}),"\n",(0,t.jsx)(n.h2,{id:"passing-variables",children:"Passing variables"}),"\n",(0,t.jsx)(n.p,{children:"As we discussed earlier, all variables are only available locally. So, you would need to pass it around from the current scope."}),"\n",(0,t.jsx)(n.p,{children:"Here is an example of how it is done:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'let foo = "example";\n\nenter([\n  poll("time", #{\n    initial: "inital value",\n    interval: "2s",\n    cmd: "date +%H:%M:%S",\n  }),\n\n  defwindow("1", #{}, wont_work()), // wont work\n  defwindow("2", #{}, will_work(time, foo)) // will work\n])\n\n// Here we have 2 variables named "time" (registered dynamically by poll) and foo (a static variable)\n\n// here is an example of something that wont\nfn wont_work() {\n  return box(#{}, [ label(#{ text: time }), label(#{ text: foo }) ]);\n}\n\n// here is an example of something that will work\nfn will_work(time, foo) { // time and foo is passed from `enter([])`\n  return box(#{}, [ label(#{ text: time }), label(#{ text: foo }) ]);\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);