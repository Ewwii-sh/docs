"use strict";(self.webpackChunkewwii_docs=self.webpackChunkewwii_docs||[]).push([[8307],{3792:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"0.2.0","label":"0.2.0","banner":"unmaintained","badge":true,"noIndex":false,"className":"docs-version-0.2.0","isLast":false,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Ewwii - Building Widgets Made Better!","href":"/docs/0.2.0/intro","docId":"intro","unlisted":false},{"type":"link","label":"Getting Familiar","href":"/docs/0.2.0/getting_familiar","docId":"getting_familiar","unlisted":false},{"type":"link","label":"Installation","href":"/docs/0.2.0/install","docId":"install","unlisted":false},{"type":"category","label":"Configuration & Syntax","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Writing your ewwii configuration","href":"/docs/0.2.0/config_and_syntax/configuration","docId":"config_and_syntax/configuration","unlisted":false},{"type":"link","label":"Fundamentals","href":"/docs/0.2.0/config_and_syntax/config_fundamentals","docId":"config_and_syntax/config_fundamentals","unlisted":false},{"type":"link","label":"Rendering and Best Practices","href":"/docs/0.2.0/config_and_syntax/rendering_and_best_practices","docId":"config_and_syntax/rendering_and_best_practices","unlisted":false},{"type":"link","label":"The Rhai Expression Engine","href":"/docs/0.2.0/config_and_syntax/expression_language","docId":"config_and_syntax/expression_language","unlisted":false},{"type":"link","label":"Variables","href":"/docs/0.2.0/config_and_syntax/variables","docId":"config_and_syntax/variables","unlisted":false}],"href":"/docs/0.2.0/config_and_syntax/"},{"type":"category","label":"Widgets","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Widget Properties","href":"/docs/0.2.0/widgets/props","docId":"widgets/props","unlisted":false},{"type":"link","label":"Widgets & Parameters","href":"/docs/0.2.0/widgets/widgets_and_params","docId":"widgets/widgets_and_params","unlisted":false}],"href":"/docs/0.2.0/widgets/"},{"type":"category","label":"Theming & UI","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Styling Widgets","href":"/docs/0.2.0/theming_and_ui/styling_widgets","docId":"theming_and_ui/styling_widgets","unlisted":false},{"type":"link","label":"Working with GTK","href":"/docs/0.2.0/theming_and_ui/working_with_gtk","docId":"theming_and_ui/working_with_gtk","unlisted":false}],"href":"/docs/0.2.0/theming_and_ui/"},{"type":"category","label":"Modules","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"API Library Module","href":"/docs/0.2.0/modules/apilib","docId":"modules/apilib","unlisted":false},{"type":"link","label":"Global Builtin Rhai Functions","href":"/docs/0.2.0/modules/global","docId":"modules/global","unlisted":false},{"type":"link","label":"Std Library Module","href":"/docs/0.2.0/modules/stdlib","docId":"modules/stdlib","unlisted":false},{"type":"link","label":"User-Defined Modules","href":"/docs/0.2.0/modules/user_defined","docId":"modules/user_defined","unlisted":false}],"href":"/docs/0.2.0/modules/"},{"type":"category","label":"Examples","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Starter Bar","href":"/docs/0.2.0/examples/starter_bar","docId":"examples/starter_bar","unlisted":false},{"type":"link","label":"Wifi Manager Template","href":"/docs/0.2.0/examples/wifi_manager","docId":"examples/wifi_manager","unlisted":false}],"href":"/docs/0.2.0/examples/"},{"type":"category","label":"Advanced Commands","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"ewwii call-fns","href":"/docs/0.2.0/commands/call_fns","docId":"commands/call_fns","unlisted":false},{"type":"link","label":"ewwii engine-override","href":"/docs/0.2.0/commands/engine_override","docId":"commands/engine_override","unlisted":false},{"type":"link","label":"ewwii update","href":"/docs/0.2.0/commands/update","docId":"commands/update","unlisted":false}],"href":"/docs/0.2.0/commands/"},{"type":"link","label":"Troubleshooting","href":"/docs/0.2.0/troubleshooting","docId":"troubleshooting","unlisted":false}]},"docs":{"commands/call_fns":{"id":"commands/call_fns","title":"ewwii call-fns","description":"The call-fns command allows you to call Rhai functions directly from the command line. This can be useful for triggering specific functionality in your widget configuration without updating or interacting with the GUI.","sidebar":"tutorialSidebar"},"commands/commands":{"id":"commands/commands","title":"Advanced Commands","description":"Now that you all are familiar with ewwii and may be making awesome widgets, lets get to know about some advanced commands in ewwii, that makes it even more flexible and powerful.","sidebar":"tutorialSidebar"},"commands/engine_override":{"id":"commands/engine_override","title":"ewwii engine-override","description":"The engine-override command allows you to override the default functionalities of the ewwii engine on a particular daemon. It requires a JSON string passed to it, which it will use to update the settings. This feature can be changed to get maximum performance as well.","sidebar":"tutorialSidebar"},"commands/update":{"id":"commands/update","title":"ewwii update","description":"The update command refreshes the widgets rendered on the screen. It allows you to immediately reflect changes in your widget configuration.","sidebar":"tutorialSidebar"},"config_and_syntax/config_and_syntax":{"id":"config_and_syntax/config_and_syntax","title":"Configuration & Syntax","description":"This section introduces the foundational systems that define how you configure your UI, express logic, and work with dynamic data in Rahi (Ewwii\'s configuration language).","sidebar":"tutorialSidebar"},"config_and_syntax/config_fundamentals":{"id":"config_and_syntax/config_fundamentals","title":"Fundamentals","description":"Ewwii uses Rhai as its configuration language. But instead of just pure Rhai, ewwii has its own layout that users should follow to create widgets using Rhai. And you may be wondering why ewwii has a \\"custom\\" layout instead of allowing users to just use pure Rhai. It\'s good question and the reason why ewwii has a custom layout is because it tries to remove unnecessary complexity.","sidebar":"tutorialSidebar"},"config_and_syntax/configuration":{"id":"config_and_syntax/configuration","title":"Writing your ewwii configuration","description":"(For a list of all built-in widgets (i.e. box, label, button), see Widget Documentation.)","sidebar":"tutorialSidebar"},"config_and_syntax/expression_language":{"id":"config_and_syntax/expression_language","title":"The Rhai Expression Engine","description":"Ewwii uses Rhai as its core expression and scripting engine. This means your configuration is more than just static values or simple substitutions\u2014it\u2019s real code, and you can use it anywhere dynamic behavior is needed.","sidebar":"tutorialSidebar"},"config_and_syntax/rendering_and_best_practices":{"id":"config_and_syntax/rendering_and_best_practices","title":"Rendering and Best Practices","description":"Rendering children in your widgets","sidebar":"tutorialSidebar"},"config_and_syntax/variables":{"id":"config_and_syntax/variables","title":"Variables","description":"Now that you feel sufficiently greeted by your bar, you may realize that showing data like the time and date might be even more useful than having a button that greets you.","sidebar":"tutorialSidebar"},"examples/examples":{"id":"examples/examples","title":"Examples","description":"This section provides hands-on, practical demonstrations of everything covered so far. Real layouts, interactive components, and theming techniques will be used in these examples.","sidebar":"tutorialSidebar"},"examples/starter_bar":{"id":"examples/starter_bar","title":"Starter Bar","description":"Example 1","sidebar":"tutorialSidebar"},"examples/wifi_manager":{"id":"examples/wifi_manager","title":"Wifi Manager Template","description":"Wifi Manager Template Screenshot","sidebar":"tutorialSidebar"},"getting_familiar":{"id":"getting_familiar","title":"Getting Familiar","description":"Before you start off with ewwii, let\'s get familiar with some things. We will talk about ewwii, eiipm, and the ewwii ecosystem.","sidebar":"tutorialSidebar"},"install":{"id":"install","title":"Installation","description":"Installation is the most important step before using ewwii, and we have a user-friendly installer which will help you install ewwii/eiipm on Linux very easily.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Ewwii - Building Widgets Made Better!","description":"Ewwii (ElKowar\'s Wacky Widgets improved interface) is a foork of","sidebar":"tutorialSidebar"},"modules/apilib":{"id":"modules/apilib","title":"API Library Module","description":"These are all the API modules available in ewwii.","sidebar":"tutorialSidebar"},"modules/global":{"id":"modules/global","title":"Global Builtin Rhai Functions","description":"These functions are built-in and available globally, meaning they can be used directly without any import.","sidebar":"tutorialSidebar"},"modules/modules":{"id":"modules/modules","title":"Modules","description":"Modules undoubtedly are one of the most powerful features in Rhai. They provide infinite extensibility to ewwii.","sidebar":"tutorialSidebar"},"modules/stdlib":{"id":"modules/stdlib","title":"Std Library Module","description":"These are all the standard modules in ewwii.","sidebar":"tutorialSidebar"},"modules/user_defined":{"id":"modules/user_defined","title":"User-Defined Modules","description":"User-defined modules allow you to organize your code by splitting it into separate, reusable files. This makes large projects easier to maintain and understand.","sidebar":"tutorialSidebar"},"theming_and_ui/styling_widgets":{"id":"theming_and_ui/styling_widgets","title":"Styling Widgets","description":"Ewwii also allows writing inline styles to widgets using the style property. These styles are then applied at runtime using GTK\'s CSS system.","sidebar":"tutorialSidebar"},"theming_and_ui/theming_and_ui":{"id":"theming_and_ui/theming_and_ui","title":"Theming & UI","description":"This section focuses on visual styling and user interface customization. The core visual layer is built atop GTK, allowing deep integration with system themes while also enabling custom overrides through SCSS-style syntax.","sidebar":"tutorialSidebar"},"theming_and_ui/working_with_gtk":{"id":"theming_and_ui/working_with_gtk","title":"Working with GTK","description":"Gtk Theming","sidebar":"tutorialSidebar"},"troubleshooting":{"id":"troubleshooting","title":"Troubleshooting","description":"Here you will find help if something doesn\'t work. If the issue isn\'t listed here, please open an issue on the GitHub repo.","sidebar":"tutorialSidebar"},"widgets/props":{"id":"widgets/props","title":"Widget Properties","description":"widget","sidebar":"tutorialSidebar"},"widgets/widgets":{"id":"widgets/widgets","title":"Widgets","description":"Widgets are the building blocks of your interface. Each widget represents a visual element\u2014text, images, containers, interactive components\u2014that can be composed, styled, and updated dynamically.","sidebar":"tutorialSidebar"},"widgets/widgets_and_params":{"id":"widgets/widgets_and_params","title":"Widgets & Parameters","description":"Below is a list of available widgets and the parameters each accepts.","sidebar":"tutorialSidebar"}}}}')}}]);