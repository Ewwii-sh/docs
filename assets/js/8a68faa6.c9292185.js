"use strict";(self.webpackChunkewwii_docs=self.webpackChunkewwii_docs||[]).push([[4738],{508:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var t=r(9729);const s={},l=t.createContext(s);function i(e){const n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(l.Provider,{value:n},e.children)}},718:(e,n,r)=>{r.d(n,{A:()=>i});r(9729);var t=r(3526);const s={tabItem:"tabItem_scR3"};var l=r(5813);function i({children:e,hidden:n,className:r}){return(0,l.jsx)("div",{role:"tabpanel",className:(0,t.A)(s.tabItem,r),hidden:n,children:e})}},955:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>x,frontMatter:()=>d,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"modules/stdlib","title":"Std Library Module","description":"These are all the standard modules in ewwii.","source":"@site/docs/modules/stdlib.md","sourceDirName":"modules","slug":"/modules/stdlib","permalink":"/docs/next/modules/stdlib","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Global Builtin Rhai Functions","permalink":"/docs/next/modules/global"},"next":{"title":"User-Defined Modules","permalink":"/docs/next/modules/user_defined"}}');var s=r(5813),l=r(508),i=r(9034),a=r(718);const d={},c="Std Library Module",o={},u=[{value:"<code>fn</code> to_camel_case",id:"fn-to_camel_case",level:2},{value:"<code>fn</code> to_lower",id:"fn-to_lower",level:2},{value:"<code>fn</code> to_slug",id:"fn-to_slug",level:2},{value:"<code>fn</code> to_upper",id:"fn-to_upper",level:2},{value:"<code>fn</code> truncate_chars",id:"fn-truncate_chars",level:2},{value:"<code>fn</code> all_resolutions",id:"fn-all_resolutions",level:2},{value:"<code>fn</code> all_resolutions_str",id:"fn-all_resolutions_str",level:2},{value:"<code>fn</code> count",id:"fn-count",level:2},{value:"<code>fn</code> dimensions",id:"fn-dimensions",level:2},{value:"<code>fn</code> dimensions_str",id:"fn-dimensions_str",level:2},{value:"<code>fn</code> dpi",id:"fn-dpi",level:2},{value:"<code>fn</code> dpi_str",id:"fn-dpi_str",level:2},{value:"<code>fn</code> primary_resolution",id:"fn-primary_resolution",level:2},{value:"<code>fn</code> primary_resolution_str",id:"fn-primary_resolution_str",level:2},{value:"<code>fn</code> find",id:"fn-find",level:2},{value:"<code>fn</code> find_all",id:"fn-find_all",level:2},{value:"<code>fn</code> is_match",id:"fn-is_match",level:2},{value:"<code>fn</code> replace",id:"fn-replace",level:2},{value:"<code>fn</code> get_current_dir",id:"fn-get_current_dir",level:2},{value:"<code>fn</code> get_env",id:"fn-get_env",level:2},{value:"<code>fn</code> get_home_dir",id:"fn-get_home_dir",level:2},{value:"<code>fn</code> get_username",id:"fn-get_username",level:2},{value:"<code>fn</code> set_env",id:"fn-set_env",level:2},{value:"<code>fn</code> run",id:"fn-run",level:2},{value:"<code>fn</code> run_and_read",id:"fn-run_and_read",level:2}];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"std-library-module",children:"Std Library Module"})}),"\n",(0,s.jsx)(n.p,{children:"These are all the standard modules in ewwii."}),"\n",(0,s.jsxs)(n.p,{children:["Each library in this module is under ",(0,s.jsx)(n.code,{children:"std::<m>"}),", where ",(0,s.jsx)(n.code,{children:"<m>"})," is the name of the specific module.\nThese modules provide essential functionalities that are will be useful for making widgets.\nThey cover tasks like string manipulation, environmental variable manipuation, running shell commands, and more."]}),"\n",(0,s.jsx)(n.admonition,{title:"Module",type:"note",children:(0,s.jsx)(n.h1,{id:"text",children:"text"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"Namespace: global/std/text"})}),"\n",(0,s.jsx)(n.p,{children:"A module providing utility functions for string manipulation."}),"\n",(0,s.jsxs)(n.h2,{id:"fn-to_camel_case",children:[(0,s.jsx)("code",{children:"fn"})," to_camel_case"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn to_camel_case(text: String) -> String\n"})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"Description",default:!0,children:(0,s.jsx)(n.p,{children:"Converts a string to camel case."})}),(0,s.jsx)(a.A,{value:"Arguments",default:!0,children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"text"})," - A string to be converted to camel case."]}),"\n"]})}),(0,s.jsx)(a.A,{value:"Returns",default:!0,children:(0,s.jsxs)(n.p,{children:["Returns the ",(0,s.jsx)(n.code,{children:"text"})," in camel case format."]})}),(0,s.jsx)(a.A,{value:"Example",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import "std::text" as text;\n\nlet result = text::to_camel_case("hello world example");\nprint(result); // output: "helloWorldExample"\n'})})})]}),"\n",(0,s.jsxs)(n.h2,{id:"fn-to_lower",children:[(0,s.jsx)("code",{children:"fn"})," to_lower"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn to_lower(s: String) -> String\n"})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"Description",default:!0,children:(0,s.jsx)(n.p,{children:"Converts a string to lowercase."})}),(0,s.jsx)(a.A,{value:"Arguments",default:!0,children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"s"})," - A string to be converted to lowercase."]}),"\n"]})}),(0,s.jsx)(a.A,{value:"Returns",default:!0,children:(0,s.jsx)(n.p,{children:"Returns the string in lowercase."})}),(0,s.jsx)(a.A,{value:"Example",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import "std::text" as text;\n\nlet result = text::to_lower("HELLO");\nprint(result); // output: "hello"\n'})})})]}),"\n",(0,s.jsxs)(n.h2,{id:"fn-to_slug",children:[(0,s.jsx)("code",{children:"fn"})," to_slug"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn to_slug(text: String) -> String\n"})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"Description",default:!0,children:(0,s.jsx)(n.p,{children:"Converts a string to a slug (lowercase words joined by hyphens)."})}),(0,s.jsx)(a.A,{value:"Arguments",default:!0,children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"text"})," - A string to be converted to a slug."]}),"\n"]})}),(0,s.jsx)(a.A,{value:"Returns",default:!0,children:(0,s.jsxs)(n.p,{children:["Returns the ",(0,s.jsx)(n.code,{children:"text"})," as a slug."]})}),(0,s.jsx)(a.A,{value:"Example",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import "std::text" as text;\n\nlet result = text::to_slug("Hello World!");\nprint(result); // output: "hello-world"\n'})})})]}),"\n",(0,s.jsxs)(n.h2,{id:"fn-to_upper",children:[(0,s.jsx)("code",{children:"fn"})," to_upper"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn to_upper(s: String) -> String\n"})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"Description",default:!0,children:(0,s.jsx)(n.p,{children:"Converts a string to uppercase."})}),(0,s.jsx)(a.A,{value:"Arguments",default:!0,children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"s"})," - A string to be converted to uppercase."]}),"\n"]})}),(0,s.jsx)(a.A,{value:"Returns",default:!0,children:(0,s.jsx)(n.p,{children:"Returns the string in uppercase."})}),(0,s.jsx)(a.A,{value:"Example",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import "std::text" as text;\n\nlet result = text::to_upper("hello");\nprint(result); // output: "HELLO"\n'})})})]}),"\n",(0,s.jsxs)(n.h2,{id:"fn-truncate_chars",children:[(0,s.jsx)("code",{children:"fn"})," truncate_chars"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn truncate_chars(text: String, max_chars: int) -> String\n"})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"Description",default:!0,children:(0,s.jsx)(n.p,{children:"Truncates a string to the specified number of characters."})}),(0,s.jsx)(a.A,{value:"Arguments",default:!0,children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"text"})," - A string to be truncated."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"max_chars"})," - The maximum number of characters to keep in the string."]}),"\n"]})}),(0,s.jsx)(a.A,{value:"Returns",default:!0,children:(0,s.jsx)(n.p,{children:"Returns a truncated string."})}),(0,s.jsx)(a.A,{value:"Example",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import "std::text" as text;\n\nlet result = text::truncate_chars("Hello World!", 5);\nprint(result); // output: "Hello"\n'})})})]}),"\n",(0,s.jsx)(n.admonition,{title:"Module",type:"note",children:(0,s.jsx)(n.h1,{id:"monitor",children:"monitor"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"Namespace: global/std/monitor"})}),"\n",(0,s.jsxs)(n.h2,{id:"fn-all_resolutions",children:[(0,s.jsx)("code",{children:"fn"})," all_resolutions"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn all_resolutions() -> Vec<[int;2]>\n"})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"Description",default:!0,children:(0,s.jsx)(n.p,{children:"Get the resolutions of all connected monitors."})}),(0,s.jsx)(a.A,{value:"Returns",default:!0,children:(0,s.jsx)(n.p,{children:"Returns an array of arrays, where each inner array contains the width and height of a monitor."})}),(0,s.jsx)(a.A,{value:"Example",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import "std::monitor" as monitor;\n\nlet resolutions = monitor::all_resolutions();\nprint(resolutions); // Output: [[width1, height1], [width2, height2], ...]\n'})})})]}),"\n",(0,s.jsxs)(n.h2,{id:"fn-all_resolutions_str",children:[(0,s.jsx)("code",{children:"fn"})," all_resolutions_str"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn all_resolutions_str() -> String\n"})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"Description",default:!0,children:(0,s.jsx)(n.p,{children:"Get the resolutions of all connected monitors as a string."})}),(0,s.jsx)(a.A,{value:"Returns",default:!0,children:(0,s.jsx)(n.p,{children:'Returns a string where each monitor\'s resolution is formatted as "width x height", separated by commas.'})}),(0,s.jsx)(a.A,{value:"Example",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import "std::monitor" as monitor;\n\nlet resolutions_str = monitor::all_resolutions_str();\nprint(resolutions_str); // Output: "1920x1080, 1280x720"\n'})})})]}),"\n",(0,s.jsxs)(n.h2,{id:"fn-count",children:[(0,s.jsx)("code",{children:"fn"})," count"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn count() -> int\n"})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"Description",default:!0,children:(0,s.jsx)(n.p,{children:"Get the number of connected monitors."})}),(0,s.jsx)(a.A,{value:"Returns",default:!0,children:(0,s.jsxs)(n.p,{children:["Returns the total number of connected monitors as an ",(0,s.jsx)(n.code,{children:"i64"}),"."]})}),(0,s.jsx)(a.A,{value:"Example",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import "std::monitor" as monitor;\n\nlet count = monitor::count();\nprint(count); // Output: Number of connected monitors\n'})})})]}),"\n",(0,s.jsxs)(n.h2,{id:"fn-dimensions",children:[(0,s.jsx)("code",{children:"fn"})," dimensions"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn dimensions(index: int) -> [int;4]\n"})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"Description",default:!0,children:(0,s.jsx)(n.p,{children:"Get the dimensions (x, y, width, height) of a specific monitor."})}),(0,s.jsx)(a.A,{value:"Arguments",default:!0,children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"index"})," - The index of the monitor (0-based)."]}),"\n"]})}),(0,s.jsx)(a.A,{value:"Returns",default:!0,children:(0,s.jsx)(n.p,{children:"Returns an array with the monitor's position (x, y) and size (width, height)."})}),(0,s.jsx)(a.A,{value:"Example",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import "std::monitor" as monitor;\n\nlet dimensions = monitor::dimensions(0);\nprint(dimensions); // Output: [x, y, width, height]\n'})})})]}),"\n",(0,s.jsxs)(n.h2,{id:"fn-dimensions_str",children:[(0,s.jsx)("code",{children:"fn"})," dimensions_str"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn dimensions_str(index: int) -> String\n"})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"Description",default:!0,children:(0,s.jsx)(n.p,{children:"Get the dimensions of a specific monitor as a string."})}),(0,s.jsx)(a.A,{value:"Arguments",default:!0,children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"index"})," - The index of the monitor (0-based)."]}),"\n"]})}),(0,s.jsx)(a.A,{value:"Returns",default:!0,children:(0,s.jsx)(n.p,{children:'Returns the monitor\'s dimensions as a string in the format "x,y - width x height".'})}),(0,s.jsx)(a.A,{value:"Example",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import "std::monitor" as monitor;\n\nlet dimensions_str = monitor::dimensions_str(0);\nprint(dimensions_str); // Output: "0,0 - 1920x1080"\n'})})})]}),"\n",(0,s.jsxs)(n.h2,{id:"fn-dpi",children:[(0,s.jsx)("code",{children:"fn"})," dpi"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn dpi(index: int) -> float\n"})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"Description",default:!0,children:(0,s.jsx)(n.p,{children:"Get the DPI (dots per inch) of a specific monitor."})}),(0,s.jsx)(a.A,{value:"Arguments",default:!0,children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"index"})," - The index of the monitor (0-based)."]}),"\n"]})}),(0,s.jsx)(a.A,{value:"Returns",default:!0,children:(0,s.jsxs)(n.p,{children:["Returns the DPI (scale factor * base DPI) of the monitor as a ",(0,s.jsx)(n.code,{children:"f64"}),"."]})}),(0,s.jsx)(a.A,{value:"Example",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import "std::monitor" as monitor;\n\nlet dpi = monitor::dpi(0);\nprint(dpi); // Output: DPI of the monitor\n'})})})]}),"\n",(0,s.jsxs)(n.h2,{id:"fn-dpi_str",children:[(0,s.jsx)("code",{children:"fn"})," dpi_str"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn dpi_str(index: int) -> String\n"})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"Description",default:!0,children:(0,s.jsx)(n.p,{children:"Get the DPI of a specific monitor as a string."})}),(0,s.jsx)(a.A,{value:"Arguments",default:!0,children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"index"})," - The index of the monitor (0-based)."]}),"\n"]})}),(0,s.jsx)(a.A,{value:"Returns",default:!0,children:(0,s.jsx)(n.p,{children:"Returns the DPI of the monitor as a string formatted to 1 decimal place."})}),(0,s.jsx)(a.A,{value:"Example",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import "std::monitor" as monitor;\n\nlet dpi_str = monitor::dpi_str(0);\nprint(dpi_str); // Output: "96.0"\n'})})})]}),"\n",(0,s.jsxs)(n.h2,{id:"fn-primary_resolution",children:[(0,s.jsx)("code",{children:"fn"})," primary_resolution"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn primary_resolution() -> [int;2]\n"})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"Description",default:!0,children:(0,s.jsx)(n.p,{children:"Get the resolution of the primary monitor."})}),(0,s.jsx)(a.A,{value:"Returns",default:!0,children:(0,s.jsxs)(n.p,{children:["Returns an array containing the width and height of the primary monitor as two ",(0,s.jsx)(n.code,{children:"i64"})," values."]})}),(0,s.jsx)(a.A,{value:"Example",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import "std::monitor" as monitor;\n\nlet resolution = monitor::primary_resolution();\nprint(resolution); // Output: [width, height]\n'})})})]}),"\n",(0,s.jsxs)(n.h2,{id:"fn-primary_resolution_str",children:[(0,s.jsx)("code",{children:"fn"})," primary_resolution_str"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn primary_resolution_str() -> String\n"})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"Description",default:!0,children:(0,s.jsx)(n.p,{children:"Get the resolution of the primary monitor as a string."})}),(0,s.jsx)(a.A,{value:"Returns",default:!0,children:(0,s.jsx)(n.p,{children:'Returns the resolution of the primary monitor as a string in the format "width x height".'})}),(0,s.jsx)(a.A,{value:"Example",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import "std::monitor" as monitor;\n\nlet resolution_str = monitor::primary_resolution_str();\nprint(resolution_str); // Output: "1920x1080"\n'})})})]}),"\n",(0,s.jsx)(n.admonition,{title:"Module",type:"note",children:(0,s.jsx)(n.h1,{id:"regex",children:"regex"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"Namespace: global/std/regex"})}),"\n",(0,s.jsx)(n.p,{children:"A module providing regular expression support."}),"\n",(0,s.jsxs)(n.h2,{id:"fn-find",children:[(0,s.jsx)("code",{children:"fn"})," find"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn find(text: String, pattern: String) -> String\n"})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"Description",default:!0,children:(0,s.jsx)(n.p,{children:"Returns the first match of a regex pattern in the text."})}),(0,s.jsx)(a.A,{value:"Arguments",default:!0,children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"text"})," - A string to be matched with the pattern."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pattern"})," - The pattern to match on the string."]}),"\n"]})}),(0,s.jsx)(a.A,{value:"Returns",default:!0,children:(0,s.jsx)(n.p,{children:"Returns a string which is the first match of a regex pattern."})}),(0,s.jsx)(a.A,{value:"Example",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import "std::regex" as regex;\n\nlet result = regex::find("This is an example!", `\\be\\w*\\b`);\nprint(result); // output: "example"\n'})})})]}),"\n",(0,s.jsxs)(n.h2,{id:"fn-find_all",children:[(0,s.jsx)("code",{children:"fn"})," find_all"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn find_all(text: String, pattern: String) -> Array\n"})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"Description",default:!0,children:(0,s.jsx)(n.p,{children:"Returns all matches of a regex pattern in the text."})}),(0,s.jsx)(a.A,{value:"Arguments",default:!0,children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"text"})," - A string to be matched with the pattern."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pattern"})," - The pattern to match on the string."]}),"\n"]})}),(0,s.jsx)(a.A,{value:"Returns",default:!0,children:(0,s.jsx)(n.p,{children:"Returns aan array of strings containing the all the things that match the regex pattern in the provided text."})}),(0,s.jsx)(a.A,{value:"Example",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import "std::regex" as regex;\n\nlet result = regex::find("This is an example!", `\\be\\w*\\b`);\nprint(result); // output: ["example"]\n'})})})]}),"\n",(0,s.jsxs)(n.h2,{id:"fn-is_match",children:[(0,s.jsx)("code",{children:"fn"})," is_match"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn is_match(text: String, pattern: String) -> bool\n"})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"Description",default:!0,children:(0,s.jsx)(n.p,{children:"Checks if a regex pattern matches the given text."})}),(0,s.jsx)(a.A,{value:"Arguments",default:!0,children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"text"})," - A string to be matched with the pattern."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pattern"})," - The pattern to match on the string."]}),"\n"]})}),(0,s.jsx)(a.A,{value:"Returns",default:!0,children:(0,s.jsx)(n.p,{children:"Returns a boolean (true/false) based on if the pattern is matched on the text provided."})}),(0,s.jsx)(a.A,{value:"Example",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import "std::regex" as regex;\n\nlet result = regex::is_match("This is an example!", "example");\nif result == true {\n    print("The pattern is matched!");\n}\n'})})})]}),"\n",(0,s.jsxs)(n.h2,{id:"fn-replace",children:[(0,s.jsx)("code",{children:"fn"})," replace"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn replace(text: String, pattern: String, replacement: String) -> String\n"})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"Description",default:!0,children:(0,s.jsx)(n.p,{children:"Replaces all matches of a regex pattern with a replacement string."})}),(0,s.jsx)(a.A,{value:"Arguments",default:!0,children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"text"})," - A string to be matched with the pattern."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pattern"})," - The pattern to match on the string."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"replacement"})," - A string that the matched pattern will get replaced with."]}),"\n"]})}),(0,s.jsx)(a.A,{value:"Returns",default:!0,children:(0,s.jsx)(n.p,{children:"Returns the provided text with the matches of the regex pattern replaced with the provided replacement argument."})}),(0,s.jsx)(a.A,{value:"Example",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import "std::regex" as regex;\n\nlet result = regex::replace("This is an example!", "an example", "a test");\nprint(result); // output: "This is a test!"\n'})})})]}),"\n",(0,s.jsx)(n.admonition,{title:"Module",type:"note",children:(0,s.jsx)(n.h1,{id:"env",children:"env"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"Namespace: global/std/env"})}),"\n",(0,s.jsxs)(n.h2,{id:"fn-get_current_dir",children:[(0,s.jsx)("code",{children:"fn"})," get_current_dir"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn get_current_dir() -> String\n"})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"Description",default:!0,children:(0,s.jsx)(n.p,{children:"Get the current working directory."})}),(0,s.jsx)(a.A,{value:"Returns",default:!0,children:(0,s.jsxs)(n.p,{children:["This function returns the current working directory as a ",(0,s.jsx)(n.code,{children:"String"}),". If there is an error\n(e.g., if the path cannot be retrieved), it returns a ",(0,s.jsx)(n.code,{children:"Result::Err"})," with the error message."]})}),(0,s.jsx)(a.A,{value:"Example",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import "std::env" as env;\n\n// Get the current working directory\nlet current_dir = env::get_current_dir();\nprint(current_dir); // output: /home/username/project\n'})})})]}),"\n",(0,s.jsxs)(n.h2,{id:"fn-get_env",children:[(0,s.jsx)("code",{children:"fn"})," get_env"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn get_env(var: String) -> String\n"})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"Description",default:!0,children:(0,s.jsx)(n.p,{children:"Get the value of an environment variable."})}),(0,s.jsx)(a.A,{value:"Arguments",default:!0,children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"var"})," - The name of the environment variable to retrieve."]}),"\n"]})}),(0,s.jsx)(a.A,{value:"Returns",default:!0,children:(0,s.jsxs)(n.p,{children:["This function returns the value of the environment variable as a ",(0,s.jsx)(n.code,{children:"String"}),".\nIf the variable is not found or there is an error, it returns a ",(0,s.jsx)(n.code,{children:"Result::Err"})," with the error message."]})}),(0,s.jsx)(a.A,{value:"Example",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import "std::env" as env;\n\n// Get the value of the "HOME" environment variable\nlet home_dir = env::get_env("HOME");\nprint(home_dir); // output: /home/username\n'})})})]}),"\n",(0,s.jsxs)(n.h2,{id:"fn-get_home_dir",children:[(0,s.jsx)("code",{children:"fn"})," get_home_dir"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn get_home_dir() -> String\n"})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"Description",default:!0,children:(0,s.jsx)(n.p,{children:"Get the path to the home directory."})}),(0,s.jsx)(a.A,{value:"Returns",default:!0,children:(0,s.jsxs)(n.p,{children:['This function returns the value of the "HOME" environment variable as a ',(0,s.jsx)(n.code,{children:"String"}),".\nIf the variable is not found or there is an error, it returns a ",(0,s.jsx)(n.code,{children:"Result::Err"})," with the error message."]})}),(0,s.jsx)(a.A,{value:"Example",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import "std::env" as env;\n\n// Get the home directory\nlet home_dir = env::get_home_dir();\nprint(home_dir); // output: /home/username\n'})})})]}),"\n",(0,s.jsxs)(n.h2,{id:"fn-get_username",children:[(0,s.jsx)("code",{children:"fn"})," get_username"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn get_username() -> String\n"})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"Description",default:!0,children:(0,s.jsx)(n.p,{children:"Get the current username."})}),(0,s.jsx)(a.A,{value:"Returns",default:!0,children:(0,s.jsxs)(n.p,{children:['This function returns the value of the "USER" environment variable as a ',(0,s.jsx)(n.code,{children:"String"}),".\nIf the variable is not found or there is an error, it returns a ",(0,s.jsx)(n.code,{children:"Result::Err"})," with the error message."]})}),(0,s.jsx)(a.A,{value:"Example",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import "std::env" as env;\n\n// Get the username of the current user\nlet username = env::get_username();\nprint(username); // output: username\n'})})})]}),"\n",(0,s.jsxs)(n.h2,{id:"fn-set_env",children:[(0,s.jsx)("code",{children:"fn"})," set_env"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn set_env(var: String, value: String)\n"})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"Description",default:!0,children:(0,s.jsx)(n.p,{children:"Set the value of an environment variable."})}),(0,s.jsx)(a.A,{value:"Arguments",default:!0,children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"var"})," - The name of the environment variable to set."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"value"})," - The value to assign to the environment variable."]}),"\n"]})}),(0,s.jsx)(a.A,{value:"Returns",default:!0,children:(0,s.jsx)(n.p,{children:"This function does not return a value."})}),(0,s.jsx)(a.A,{value:"Example",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import "std::env" as env;\n\n// Set the value of the "MY_VAR" environment variable\nenv::set_env("MY_VAR", "SomeValue");\n'})})})]}),"\n",(0,s.jsx)(n.admonition,{title:"Module",type:"note",children:(0,s.jsx)(n.h1,{id:"command",children:"command"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"Namespace: global/std/command"})}),"\n",(0,s.jsxs)(n.h2,{id:"fn-run",children:[(0,s.jsx)("code",{children:"fn"})," run"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn run(cmd: String)\n"})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"Description",default:!0,children:(0,s.jsx)(n.p,{children:"Executes a shell command without capturing the output."})}),(0,s.jsx)(a.A,{value:"Arguments",default:!0,children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cmd"})," - The shell command to execute as a string."]}),"\n"]})}),(0,s.jsx)(a.A,{value:"Returns",default:!0,children:(0,s.jsx)(n.p,{children:"This function returns nothing if the command executes successfully. If there is an error\nrunning the command, it returns the error."})}),(0,s.jsx)(a.A,{value:"Example",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import "std::command" as cmd;\n\n// Run a shell command (e.g., list directory contents)\ncmd::run("ls -l");\n'})})})]}),"\n",(0,s.jsxs)(n.h2,{id:"fn-run_and_read",children:[(0,s.jsx)("code",{children:"fn"})," run_and_read"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn run_and_read(cmd: String) -> String\n"})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"Description",default:!0,children:(0,s.jsx)(n.p,{children:"Executes a shell command and captures its output."})}),(0,s.jsx)(a.A,{value:"Arguments",default:!0,children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cmd"})," - The shell command to execute as a string."]}),"\n"]})}),(0,s.jsx)(a.A,{value:"Returns",default:!0,children:(0,s.jsxs)(n.p,{children:["This function returns the standard output of the command as a ",(0,s.jsx)(n.code,{children:"string"}),". If the command fails,\nit returns the error."]})}),(0,s.jsx)(a.A,{value:"Example",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import "std::command" as cmd;\n\n// Run a shell command and capture its output\nlet output = cmd::run_and_read("echo \'Hello, world!\'");\nprint(output); // output: Hello, world!\n'})})})]})]})}function x(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},9034:(e,n,r)=>{r.d(n,{A:()=>b});var t=r(9729),s=r(3526),l=r(4723),i=r(5470),a=r(8141),d=r(7351),c=r(2541),o=r(8508);function u(e){return t.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:n,children:r}=e;return(0,t.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:r,default:t}})=>({value:e,label:n,attributes:r,default:t}))}(r);return function(e){const n=(0,c.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,r])}function x({value:e,tabValues:n}){return n.some(n=>n.value===e)}function j({queryString:e=!1,groupId:n}){const r=(0,i.W6)(),s=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,d.aZ)(s),(0,t.useCallback)(e=>{if(!s)return;const n=new URLSearchParams(r.location.search);n.set(s,e),r.replace({...r.location,search:n.toString()})},[s,r])]}function p(e){const{defaultValue:n,queryString:r=!1,groupId:s}=e,l=h(e),[i,d]=(0,t.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!x({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const r=n.find(e=>e.default)??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:l})),[c,u]=j({queryString:r,groupId:s}),[p,m]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[r,s]=(0,o.Dv)(n);return[r,(0,t.useCallback)(e=>{n&&s.set(e)},[n,s])]}({groupId:s}),f=(()=>{const e=c??p;return x({value:e,tabValues:l})?e:null})();(0,a.A)(()=>{f&&d(f)},[f]);return{selectedValue:i,selectValue:(0,t.useCallback)(e=>{if(!x({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);d(e),u(e),m(e)},[u,m,l]),tabValues:l}}var m=r(6703);const f={tabList:"tabList_AQvi",tabItem:"tabItem_CgMb"};var g=r(5813);function v({className:e,block:n,selectedValue:r,selectValue:t,tabValues:i}){const a=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.a_)(),c=e=>{const n=e.currentTarget,s=a.indexOf(n),l=i[s].value;l!==r&&(d(n),t(l))},o=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const r=a.indexOf(e.currentTarget)+1;n=a[r]??a[0];break}case"ArrowLeft":{const r=a.indexOf(e.currentTarget)-1;n=a[r]??a[a.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},e),children:i.map(({value:e,label:n,attributes:t})=>(0,g.jsx)("li",{role:"tab",tabIndex:r===e?0:-1,"aria-selected":r===e,ref:e=>{a.push(e)},onKeyDown:o,onClick:c,...t,className:(0,s.A)("tabs__item",f.tabItem,t?.className,{"tabs__item--active":r===e}),children:n??e},e))})}function _({lazy:e,children:n,selectedValue:r}){const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=l.find(e=>e.props.value===r);return e?(0,t.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:l.map((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==r}))})}function A(e){const n=p(e);return(0,g.jsxs)("div",{className:(0,s.A)("tabs-container",f.tabList),children:[(0,g.jsx)(v,{...n,...e}),(0,g.jsx)(_,{...n,...e})]})}function b(e){const n=(0,m.A)();return(0,g.jsx)(A,{...e,children:u(e.children)},String(n))}}}]);