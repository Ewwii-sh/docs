name: Deploy Docusaurus Site

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ewwii-sh/docs/docusaurus-builder:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Cache Rust deps
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            **/target-*
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache Node deps
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: pnpm

      - name: Install Node dependencies
        run: pnpm install --frozen-lockfile

      - name: Clone or update Ewwii repo
        run: |
          if [ -d "ewwii/.git" ]; then
            echo "Ewwii repo exists, fetching missing files..."
            cd ewwii
            git fetch --all --tags --force
            git reset --hard origin/main
          else
            echo "Ewwii repo missing, doing a partial clone..."
            git init ewwii
            cd ewwii
            git remote add origin https://github.com/Ewwii-sh/ewwii.git
            git fetch --depth=1 origin main
            git checkout -f FETCH_HEAD
          fi

      - name: Setup Rust toolchain
        run: rustup default stable

      - name: Generate Rhai docs for next
        run: |
          mkdir -p ./tools/generate-rhai-docs/auto_gen/
          cargo run --release -p generate-rhai-docs

          mkdir -p ./docs/modules/
          cp -r ./tools/generate-rhai-docs/auto_gen/* ../docs/modules/
        working-directory: ./ewwii

      - name: Generate Rhai docs for all frozen versions
        run: |
          cd ewwii
          versions=$(jq -r '.[]' ../versions.json)
          git fetch --tags --force
          for v in $versions; do
            echo "Processing version $v"
            mkdir -p ../versioned_docs/version-$v/modules/
            git checkout "v${v}"

            cargo run --release -p generate-rhai-docs

            cp -r ./tools/generate-rhai-docs/auto_gen/* ../versioned_docs/version-$v/modules/
          done

      - name: Build site
        run: pnpm run build

      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
